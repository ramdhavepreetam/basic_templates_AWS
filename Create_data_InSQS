Absolutely! Below is the Lambda code structured professionally, using helper functions, and integrating with PostgreSQL and SQS based on your requirements:

```python
import psycopg2
import boto3
import json
import logging

logging.basicConfig(level=logging.INFO)

def get_secrets(secret_id):
    try:
        secrets_client = boto3.client('secretsmanager')
        response = secrets_client.get_secret_value(SecretId=secret_id)
        secrets = json.loads(response['SecretString'])
        return secrets
    except Exception as e:
        logging.error(f"Error fetching secrets: {e}")
        raise

def connect_to_db(db_params):
    try:
        conn = psycopg2.connect(**db_params)
        return conn
    except Exception as e:
        logging.error(f"Error connecting to the database: {e}")
        raise

def fetch_data_from_db(cur, query):
    try:
        cur.execute(query)
        return cur.fetchall()
    except Exception as e:
        logging.error(f"Error executing query: {e}")
        raise

def send_to_sqs(dealer_code, sqs_queue_url):
    try:
        sqs_client = boto3.client('sqs')
        message_body = {"dealer_code": dealer_code}
        response = sqs_client.send_message(
            QueueUrl=sqs_queue_url,
            MessageBody=json.dumps(message_body)
        )
        logging.info(f"Successfully sent dealer code {dealer_code} to SQS with message ID {response['MessageId']}")
    except Exception as e:
        logging.error(f"Error sending dealer code {dealer_code} to SQS: {e}")
        raise

def lambda_handler(event, context):
    try:
        secrets = get_secrets('your_secret_id')  # Replace 'your_secret_id' with the appropriate secret ID
        
        DB_PARAMS = {
            'dbname': secrets['dbname'],
            'user': secrets['user'],
            'password': secrets['password'],
            'host': secrets['host'],
            'port': secrets['port']
        }
        
        conn = connect_to_db(DB_PARAMS)
        cur = conn.cursor()
        
        initial_data = fetch_data_from_db(cur, "SELECT distinct \"DEALER_CODE\" FROM ppdglobal.\"DEALER_MASTER\"")
        
        sqs_queue_url = secrets['sqs_queue_url']  # Make sure this key exists in your secret
        
        for item in initial_data:
            dealer_code = item[0]
            send_to_sqs(dealer_code, sqs_queue_url)
        
        cur.close()
        conn.close()
        
        return {
            'statusCode': 200,
            'body': json.dumps('Data successfully processed and sent to SQS!')
        }

    except Exception as e:
        logging.error(f"Error in the Lambda handler: {e}")
        return {
            'statusCode': 500,
            'body': json.dumps('An error occurred. Check logs for details.')
        }
```

Make sure you have:

1. Created an SQS queue and have its URL.
2. Stored the necessary database credentials and the SQS queue URL in AWS Secrets Manager.
3. Granted the Lambda function's IAM role permission to access the secret, connect to the PostgreSQL database (if necessary), and send messages to the SQS queue.

This code will pull distinct dealer codes from your PostgreSQL database and send each one as a separate message to the specified SQS queue.
